package com.robson.pride.skills.special;

import com.robson.pride.api.data.manager.SkillDataManager;
import com.robson.pride.api.data.types.skill.DurationSkillData;
import com.robson.pride.api.utils.*;
import com.robson.pride.registries.AnimationsRegister;
import com.robson.pride.registries.ParticleRegister;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.ai.attributes.AttributeModifier;
import net.minecraft.world.entity.ai.attributes.Attributes;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.phys.Vec3;
import net.minecraftforge.event.entity.living.LivingAttackEvent;
import yesman.epicfight.gameasset.EpicFightSounds;
import yesman.epicfight.world.damagesource.StunType;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

public interface Vulnerability {

     List<LivingEntity> STEALTH_CASES = new ArrayList<>();

    static void setVulnerable(LivingEntity entity, int duration, boolean isGuardBreak) {
        if (entity != null && !entity.level().isClientSide){
            if (!isGuardBreak) {
                STEALTH_CASES.add(entity);
            }
            SkillDataManager.addSkill(entity, SkillDataManager.VULNERABILITY);
            TimerUtil.schedule(() -> SkillDataManager.removeSkill(entity, SkillDataManager.VULNERABILITY), duration, TimeUnit.MILLISECONDS);
        }
    }

    static boolean isVulnerable(LivingEntity entity){
        return SkillDataManager.isSkillActive(entity, SkillDataManager.VULNERABILITY);
    }

    static boolean isStealthCase(LivingEntity entity){
        return STEALTH_CASES.contains(entity);
    }

    static void renderCriticalParticle(Player player, Entity target) {
        if (player != null && target instanceof LivingEntity && (canBackStab(player.position(), target) || isVulnerable((LivingEntity) target)) && AnimUtils.getCurrentAnimation(player) != AnimationsRegister.EXECUTE.get()) {
            ParticleUtils.spawnParticle(ParticleRegister.VULNERABLE.get(), (float) target.getX(), (float) (target.getY() + target.getBbHeight() * 1.25f), (float) target.getZ(), 0, 0, 0);
        }
    }

    static boolean canBackStab(Vec3 sourceLocation, Entity target) {
        if (target != null && sourceLocation != null && TargetUtil.getTarget(target) == null) {
            Vec3 viewVector = target.getViewVector(1.0F);
            viewVector = viewVector.subtract(0, viewVector.y, 0).normalize();
            Vec3 toSourceLocation = sourceLocation.subtract(target.position()).normalize();
            return toSourceLocation.dot(viewVector) < 0.0D;
        }
        return false;
    }

    DurationSkillData DATA = new DurationSkillData() {

        @Override
        public void onStart(LivingEntity entity){
            super.onStart(entity);
            if (!isStealthCase(entity)){
                AnimUtils.applyStun(entity, StunType.NEUTRALIZE, 5);
                PlaySoundUtils.playSound(entity, EpicFightSounds.NEUTRALIZE_BOSSES.get(), 1, 1);
             }
            AttributeUtils.addModifier(entity, Attributes.ARMOR, "e0183cbd-f6b9-44b6-8a19-dc729cdef481", -1000, AttributeModifier.Operation.ADDITION);
        }

        @Override
        public void onEnd(LivingEntity entity){
            super.onEnd(entity);
            AttributeUtils.removeModifier(entity, Attributes.ARMOR, "e0183cbd-f6b9-44b6-8a19-dc729cdef481");
            STEALTH_CASES.remove(entity);
        }


        @Override
        public void onAttacked(LivingEntity ent, LivingAttackEvent event) {
            if (isStealthCase(ent)){
                SkillDataManager.removeSkill(ent, SkillDataManager.VULNERABILITY);
               TimerUtil.schedule(()-> setVulnerable(ent, 3000, true), 50, TimeUnit.MILLISECONDS);

            }
            else {
                PlaySoundUtils.playSoundByString(event.getSource().getEntity(), "pride:execution", 1, 1);
                SkillDataManager.removeSkill(ent, SkillDataManager.VULNERABILITY);
            }
        }
    };
}
